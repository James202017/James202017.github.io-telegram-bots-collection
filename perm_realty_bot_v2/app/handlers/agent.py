from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.keyboards import agent_menu_kb, payment_method_kb
from app.services.db import has_active_subscription, list_recent_leads, insert_property
from app.config import settings

router = Router()

class AddProperty(StatesGroup):
    city = State()
    address = State()
    price = State()
    rooms = State()
    segment = State()
    url = State()

@router.callback_query(F.data == "agent:subscribe")
async def agent_subscribe(cb: CallbackQuery):
    await cb.message.edit_text(
        "‚≠ê <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤</b>\n"
        "‚Ä¢ –õ–µ–Ω—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n‚Ä¢ –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", parse_mode="HTML",
        reply_markup=payment_method_kb("agent")
    )
    await cb.answer()

@router.callback_query(F.data == "agent:leads")
async def agent_leads(cb: CallbackQuery):
    has_sub = await has_active_subscription(cb.from_user.id, "agent")
    if not has_sub:
        await cb.message.edit_text(
            "–î–æ—Å—Ç—É–ø –∫ –ª–µ–Ω—Ç–µ –∑–∞—è–≤–æ–∫ –æ—Ç–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.", parse_mode="HTML",
            reply_markup=agent_menu_kb(False)
        )
        await cb.answer()
        return
    leads = await list_recent_leads(10)
    if not leads:
        await cb.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=agent_menu_kb(True))
    else:
        lines = ["üì• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>"]
        for _id, city, params_json, created_at in leads:
            lines.append(f"‚Ä¢ #{_id} ¬∑ {city} ¬∑ {created_at}")
        await cb.message.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=agent_menu_kb(True))
    await cb.answer()

@router.callback_query(F.data == "agent:add_object")
async def agent_add_object(cb: CallbackQuery, state: FSMContext):
    has_sub = await has_active_subscription(cb.from_user.id, "agent")
    if not has_sub:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)
        return
    await state.set_state(AddProperty.city)
    await cb.message.edit_text("üó∫ –ì–æ—Ä–æ–¥ –æ–±—ä–µ–∫—Ç–∞:")
    await cb.answer()

@router.message(AddProperty.city)
async def ap_city(m: Message, state: FSMContext):
    await state.update_data(city=m.text.strip() or settings.city_default)
    await state.set_state(AddProperty.address)
    await m.answer("üìç –ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º):")

@router.message(AddProperty.address)
async def ap_address(m: Message, state: FSMContext):
    await state.update_data(address=m.text.strip())
    await state.set_state(AddProperty.price)
    await m.answer("üí∞ –¶–µ–Ω–∞ (—Ä—É–±):")

@router.message(AddProperty.price)
async def ap_price(m: Message, state: FSMContext):
    try:
        price = int(m.text.replace(" ", ""))
    except Exception:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 8500000")
        return
    await state.update_data(price=price)
    await state.set_state(AddProperty.rooms)
    await m.answer("üõè –ö–æ–º–Ω–∞—Ç: (0=—Å—Ç—É–¥–∏—è)")

@router.message(AddProperty.rooms)
async def ap_rooms(m: Message, state: FSMContext):
    try:
        rooms = int(m.text)
    except Exception:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 2")
        return
    await state.update_data(rooms=rooms)
    await state.set_state(AddProperty.segment)
    await m.answer("üè¢ –°–µ–≥–º–µ–Ω—Ç: –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞' –∏–ª–∏ '–≤—Ç–æ—Ä–∏—á–∫–∞'")

@router.message(AddProperty.segment)
async def ap_segment(m: Message, state: FSMContext):
    seg = m.text.lower().strip()
    new_build = True if seg.startswith("–Ω–æ–≤") else False
    await state.update_data(new_build=new_build)
    await state.set_state(AddProperty.url)
    await m.answer("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü–∞, PDF, Google Drive –∏ —Ç.–ø.)")

@router.message(AddProperty.url)
async def ap_url(m: Message, state: FSMContext):
    data = await state.get_data()
    await insert_property(
        agent_user_id=m.from_user.id,
        city=data["city"],
        address=data["address"],
        price=data["price"],
        rooms=data["rooms"],
        new_build=data["new_build"],
        url=m.text.strip()
    )
    await state.clear()
    await m.answer("‚úÖ –û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
