from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.keyboards import buyer_menu_kb, payment_method_kb
from app.services.db import insert_lead, list_properties
from app.config import settings

router = Router()

class BuyerForm(StatesGroup):
    city = State()
    budget = State()
    rooms = State()
    segment = State()

@router.callback_query(F.data == "buyer:search")
async def buyer_start(cb: CallbackQuery, state: FSMContext):
    await state.set_state(BuyerForm.city)
    await cb.message.edit_text("üó∫ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ü–µ—Ä–º—å):")
    await cb.answer()

@router.message(BuyerForm.city)
async def buyer_city(m: Message, state: FSMContext):
    city = m.text.strip() if m.text.strip() else settings.city_default
    await state.update_data(city=city)
    await state.set_state(BuyerForm.budget)
    await m.answer("üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç (–≤ —Ä—É–±–ª—è—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 9000000")

@router.message(BuyerForm.budget)
async def buyer_budget(m: Message, state: FSMContext):
    try:
        budget = int(m.text.replace(" ", ""))
    except Exception:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 9000000")
        return
    await state.update_data(budget=budget)
    await state.set_state(BuyerForm.rooms)
    await m.answer("üõè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (—Å—Ç—É–¥–∏—è=0). –ü—Ä–∏–º–µ—Ä: 1, 2, 3")

@router.message(BuyerForm.rooms)
async def buyer_rooms(m: Message, state: FSMContext):
    try:
        rooms = int(m.text)
    except Exception:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2")
        return
    await state.update_data(rooms=rooms)
    await state.set_state(BuyerForm.segment)
    await m.answer("üè¢ –°–µ–≥–º–µ–Ω—Ç: –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞' –∏–ª–∏ '–≤—Ç–æ—Ä–∏—á–∫–∞' (–∏–ª–∏ '–ª—é–±–æ–π')")

@router.message(BuyerForm.segment)
async def buyer_segment(m: Message, state: FSMContext):
    segment_raw = m.text.lower().strip()
    new_build = None
    if segment_raw.startswith("–Ω–æ–≤"):
        new_build = True
    elif segment_raw.startswith("–≤—Ç–æ—Ä"):
        new_build = False

    data = await state.get_data()
    await insert_lead(m.from_user.id, "buyer", data.get("city", settings.city_default), {
        "budget": data["budget"],
        "rooms": data["rooms"],
        "segment": segment_raw
    })

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É
    lead_text = (
        "üì® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{m.from_user.username or m.from_user.id}\n"
        f"ID: <code>{m.from_user.id}</code>\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city', settings.city_default)}\n"
        f"–ë—é–¥–∂–µ—Ç: {data['budget']} ‚ÇΩ\n"
        f"–ö–æ–º–Ω–∞—Ç: {data['rooms']}\n"
        f"–°–µ–≥–º–µ–Ω—Ç: {segment_raw}"
    )
    await m.bot.send_message(settings.admin_chat_id, lead_text, parse_mode="HTML")

    # –¥–µ–º–æ-–≤—ã–¥–∞—á–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –æ–±—ä–µ–∫—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
    props = await list_properties(
        city=data.get("city", settings.city_default),
        max_price=data["budget"],
        rooms=data["rooms"],
        new_build=new_build,
        limit=5
    )
    if props:
        lines = ["üîé <b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>"]
        for city, address, price, rooms, nb, url in props:
            nb_txt = "–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞" if nb else "–≤—Ç–æ—Ä–∏—á–∫–∞"
            lines.append(f"‚Ä¢ {address} ‚Äî {price:,} ‚ÇΩ, {rooms}-–∫, {nb_txt}\n{url or ''}")
        await m.answer("\n".join(lines).replace(",", " "), parse_mode="HTML")
    else:
        await m.answer("–ü–æ–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º –≤–∞—Å –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–∏—à–ª—ë–º –ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

    await m.answer(
        "üéÅ –•–æ—Ç–∏—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç? –ü–æ–¥–∫–ª—é—á–∏—Ç–µ <b>–ü—Ä–µ–º–∏—É–º</b> (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, "
        "–ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∏–¥–∫–∞–º).", parse_mode="HTML",
        reply_markup=payment_method_kb("buyer")
    )
    await state.clear()

@router.callback_query(F.data == "buyer:premium")
async def buyer_premium(cb: CallbackQuery):
    await cb.message.edit_text(
        "‚≠ê <b>–ü—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</b>\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–¥–±–æ—Ä—ã\n‚Ä¢ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∞–∫—Ü–∏—è–º\n‚Ä¢ –õ–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", parse_mode="HTML",
        reply_markup=payment_method_kb("buyer")
    )
    await cb.answer()
