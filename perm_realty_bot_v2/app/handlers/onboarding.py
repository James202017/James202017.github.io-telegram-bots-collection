from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.keyboards import subs_kb, role_kb
from app.config import settings
from app.services.subscheck import verify_pair

router = Router()

class ProfileForm(StatesGroup):
    role = State()
    city = State()

async def start_onboarding(message_or_cb, bot):
    txt = (
        "üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. "
        "–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ —É—Å–∫–æ—Ä—è—Ç—å –≤—ã–¥–∞—á—É –∑–∞—è–≤–æ–∫.\n\n"
        "1) –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞.\n"
        "2) –ù–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å)¬ª.\n"
        "3) –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É."
    )
    markup = subs_kb(settings.main_channel_url, settings.support_channel_url)
    if hasattr(message_or_cb, "message"):  # CallbackQuery
        await message_or_cb.message.answer(txt, parse_mode="HTML", reply_markup=markup)
    else:
        await message_or_cb.answer(txt, parse_mode="HTML", reply_markup=markup)

@router.callback_query(F.data == "subs:check")
async def subs_check(cb: CallbackQuery, state: FSMContext):
    ok_main, ok_sup = await verify_pair(cb.bot, settings.main_channel_id, settings.support_channel_id, cb.from_user.id)
    if not (ok_main and ok_sup):
        missing = []
        if not ok_main: missing.append("–≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª")
        if not ok_sup: missing.append("–∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: " + ", ".join(missing), show_alert=True)
        return
    # proceed to profile
    await state.set_state(ProfileForm.role)
    await cb.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:", reply_markup=role_kb())
    await cb.answer()

@router.callback_query(F.data.startswith("profile:role:"))
async def set_role(cb: CallbackQuery, state: FSMContext):
    role = cb.data.split(":")[-1]
    await state.update_data(role=role)
    await state.set_state(ProfileForm.city)
    await cb.message.answer("üó∫ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞? –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥.")
    await cb.answer()

@router.message(ProfileForm.city)
async def set_city(m: Message, state: FSMContext):
    city = m.text.strip()
    data = await state.get_data()
    role = data.get("role", "buyer")
    await state.clear()
    # send to admin
    msg = (
        "üÜï <b>–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{m.from_user.username or m.from_user.id}\n"
        f"ID: <code>{m.from_user.id}</code>\n"
        f"–†–æ–ª—å: {'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' if role=='buyer' else '–†–∏–µ–ª—Ç–æ—Ä'}\n"
        f"–ì–æ—Ä–æ–¥: {city}"
    )
    await m.bot.send_message(chat_id=settings.admin_chat_id, text=msg, parse_mode="HTML")
    await m.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ–º—Å—è.")
