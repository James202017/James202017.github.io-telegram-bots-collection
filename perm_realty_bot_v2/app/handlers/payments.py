from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from app.keyboards import plans_kb, admin_approve_kb, agent_menu_kb, buyer_menu_kb
from app.services.payments import send_stars_invoice, handle_precheckout, handle_successful_payment
from app.services.subscriptions import get_plan
from app.config import settings

router = Router()

@router.callback_query(F.data.startswith("pay:stars:"))
async def pay_stars(cb: CallbackQuery):
    role = cb.data.split(":")[2]
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=plans_kb(role))
    await cb.answer()

@router.callback_query(F.data.startswith("plan:"))
async def plan_choose(cb: CallbackQuery):
    _, role, plan = cb.data.split(":")
    await send_stars_invoice(cb.bot, cb.from_user.id, role, plan)
    await cb.answer("–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

class SBP(StatesGroup):
    waiting_screenshot = State()
    role = State()
    plan = State()

@router.callback_query(F.data.startswith("pay:sbp:"))
async def pay_sbp(cb: CallbackQuery, state: FSMContext):
    role = cb.data.split(":")[2]
    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ —á–µ—Ä–µ–∑ —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏
    await cb.message.edit_text(
        "üè¶ <b>–û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü</b>\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.\n"
        "2) –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä <b>+7 912 986-86-88</b> (–¢‚Äë–ë–∞–Ω–∫/–¢–∏–Ω—å–∫–æ—Ñ—Ñ).\n"
        "3) –ù–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —á–µ–∫–∞ ‚Äî –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É.",
        parse_mode="HTML",
        reply_markup=plans_kb(role)
    )
    await cb.answer()

@router.callback_query(F.data.startswith("sbp:paid:"))
async def sbp_paid(cb: CallbackQuery, state: FSMContext):
    _, _, role, plan = cb.data.split(":")
    await state.update_data(role=role, plan=plan)
    await state.set_state(SBP.waiting_screenshot)
    await cb.message.edit_text("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –°–ë–ü –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await cb.answer()

@router.message(SBP.waiting_screenshot, F.content_type.in_({ContentType.PHOTO, ContentType.DOCUMENT}))
async def sbp_receive(m: Message, state: FSMContext):
    data = await state.get_data()
    plan = get_plan(data["role"], data["plan"])
    caption = (
        f"üí≥ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –°–ë–ü</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{m.from_user.username or m.from_user.id}\n"
        f"–†–æ–ª—å: {data['role']}\n–¢–∞—Ä–∏—Ñ: {plan['title']} ({plan['stars']}‚≠ê)"
    )
    if m.photo:
        file_id = m.photo[-1].file_id
        await m.bot.send_photo(chat_id=settings.admin_chat_id, photo=file_id, caption=caption, parse_mode="HTML",
                               reply_markup=admin_approve_kb(m.from_user.id, data['plan'], data['role']))
    elif m.document:
        await m.bot.send_document(chat_id=settings.admin_chat_id, document=m.document.file_id, caption=caption, parse_mode="HTML",
                                  reply_markup=admin_approve_kb(m.from_user.id, data['plan'], data['role']))
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –£–≤–µ–¥–æ–º–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—à–µ–º –¥–æ—Å—Ç—É–ø.")
    await state.clear()

@router.pre_checkout_query()
async def on_pre_checkout(pcq):
    await handle_precheckout(pcq, pcq.bot)

@router.message(F.successful_payment)
async def on_success_payment(m: Message):
    await handle_successful_payment(m)
    # –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –∞–Ω–∫–µ—Ç–∞
    from app.handlers.onboarding import start_onboarding
    await start_onboarding(m, m.bot)
    try:
        role, _ = m.successful_payment.invoice_payload.split(":", 1)
    except Exception:
        role = "buyer"
    if role == "agent":
        await m.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∞–≥–µ–Ω—Ç–∞:", reply_markup=agent_menu_kb(True))
    else:
        await m.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", reply_markup=buyer_menu_kb())

@router.callback_query(F.data.startswith("admin:approve:"))
async def admin_approve(cb: CallbackQuery):
    parts = cb.data.split(":")
    _, _, user_id, role, plan = parts
    from app.services.db import set_subscription
    p = get_plan(role, plan)
    expires = await set_subscription(int(user_id), role, p["days"])
    await cb.bot.send_message(int(user_id), 
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ –°–ë–ü. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{expires.strftime('%d.%m.%Y %H:%M')}</b> UTC.",
        parse_mode="HTML"
    )
    from app.handlers.onboarding import start_onboarding
    class _X: pass
    tmp = _X(); tmp.answer = lambda *a, **k: cb.bot.send_message(int(user_id), *a, **k)
    await start_onboarding(tmp, cb.bot)
    await cb.message.edit_text(cb.message.html_text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.", parse_mode="HTML")
    await cb.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

@router.callback_query(F.data.startswith("admin:reject:"))
async def admin_reject(cb: CallbackQuery):
    parts = cb.data.split(":")
    _, _, user_id, role, plan = parts
    await cb.bot.send_message(int(user_id), 
        "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–ª–∞—Ç—ë–∂ –ø–æ –°–ë–ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫.",
    )
    await cb.message.edit_text(cb.message.html_text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.", parse_mode="HTML")
    await cb.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
